#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit;

// CLI

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')
  .option('-e, --ejs', 'add ejs engine support (defaults to jade)')
  //.option('-p, --pug', 'add pug engine support (defaults to jade)')
  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)')
  .option('    --git', 'add .gitignore')
  .option('    --es6', 'use es6 code where possible')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {
  var wait = 5;

  console.log();
  function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');

    if (launchedFromCmd()) {
      console.log('     %s SET DEBUG=%s:* & npm start', prompt, app_name);
    } else {
      console.log('     %s DEBUG=%s:* npm start', prompt, app_name);
    }

    console.log();
  }

  // JavaScript
  var suffix = program.es6 ? '_es6' : '';
  var server = loadTemplate('js/server' + suffix + '.js');
  var pagesController = loadTemplate('js/controllers/pages_controller' + suffix + '.js');
  var routes = loadTemplate('js/routes.js');
  var envs = loadTemplate('js/env.js');

  var initGeneric = loadTemplate('js/config/initializers/00_generic.js');
  var initMime = loadTemplate('js/config/initializers/01_mime.js');
  var initViews = loadTemplate('js/config/initializers/02_views.js');
  var initMiddleware = loadTemplate('js/config/initializers/30_middleware.js');


  // CSS
  var css = loadTemplate('css/style.css');
  var less = loadTemplate('css/style.less');
  var stylus = loadTemplate('css/style.styl');
  var compass = loadTemplate('css/style.scss');
  var sass = loadTemplate('css/style.sass');

  mkdir(path, function(){
    mkdir(path + '/public');
    mkdir(path + '/public/javascripts');
    mkdir(path + '/public/images');
    mkdir(path + '/public/stylesheets', function(){
      switch (program.css) {
        case 'less':
          write(path + '/public/stylesheets/style.less', less);
          break;
        case 'stylus':
          write(path + '/public/stylesheets/style.styl', stylus);
          break;
        case 'compass':
          write(path + '/public/stylesheets/style.scss', compass);
          break;
        case 'sass':
          write(path + '/public/stylesheets/style.sass', sass);
          break;
        default:
          write(path + '/public/stylesheets/style.css', css);
      }
      complete();
    });

    mkdir(path + '/app/controllers', function(){
      write(path + '/app/controllers/pages_controller.js', pagesController);
      complete();
    });

    mkdir(path + '/app/views/pages', function(){
      switch (program.template) {
        case 'ejs':
          copy_template('ejs/main.html.ejs', path + '/app/views/pages/main.html.ejs');
          copy_template('ejs/error.html.ejs', path + '/app/views/pages/error.html.ejs');
          break;
        case 'jade':
          copy_template('jade/main.jade', path + '/app/views/pages/main.jade');
          copy_template('jade/layout.jade', path + '/app/views/layout.jade');
          copy_template('jade/error.jade', path + '/app/views/pages/error.jade');
          break;
        case 'pug':
          copy_template('jade/main.jade', path + '/app/views/pages/main.pug');
          copy_template('jade/layout.jade', path + '/app/views/layout.pug');
          copy_template('jade/error.jade', path + '/app/views/pages/error.pug');
          break;
      }
      complete();
    });

    // CSS Engine support
    switch (program.css) {
      case 'less':
        initMiddleware = initMiddleware.replace('{css}', eol + '  this.use(require(\'less-middleware\')(path.join(__dirname, \'/../../public\')));');
        break;
      case 'stylus':
        initMiddleware = initMiddleware.replace('{css}', eol + '  this.use(require(\'stylus\').middleware(path.join(__dirname, \'/../../public\')));');
        break;
      case 'compass':
        initMiddleware = initMiddleware.replace('{css}', eol + '  this.use(require(\'node-compass\')({mode: \'expanded\'}));');
        break;
      case 'sass':
        initMiddleware = initMiddleware.replace('{css}', eol + '  this.use(require(\'node-sass-middleware\')({\n  src: path.join(__dirname, \'/../../public\'),\n  dest: path.join(__dirname, \'public\'),\n  indentedSyntax: true,\n  sourceMap: true\n}));');
        break;
      default:
        initMiddleware = initMiddleware.replace('{css}', '');
    }

    // Template support
    initViews = initViews.replace(new RegExp('{views}', 'g'), program.template);

    if (program.template === 'jade') {
      initViews = initViews.replace('{views_format}', eol + "  this.format('html', { extension: '.jade' });");
    } else if (program.template === 'pug') {
      initViews = initViews.replace('{views_format}', eol + "  this.format('html', { extension: '.pug' });");
    } else {
      initViews = initViews.replace('{views_format}', eol + "  /* this.format('html', { extension: '.jade' }); */");
    }

    // package.json
    var pkg = {
      name: app_name,
      version: '0.0.1',
      private: true,
      dependencies: {
        'emvc': '*',
        'bootable': '0.2.x',
        'bootable-environment': '0.2.x',
        'express': '~4.13.1',
        'connect-powered-by': '0.1.x',
        'morgan': '~1.6.1',
        'serve-favicon': '~2.3.0',
        'body-parser': '~1.13.2',
        'method-override': '1.x.x',
        'debug': '~2.2.0',
        'cookie-parser': '~1.3.5',
        'errorhandler': '1.x.x'
      },
      scripts: {
        start: 'node server.js'
      }
    };

    switch (program.template) {
      case 'jade':
        pkg.dependencies['jade'] = '~1.11.0';
        break;
      case 'pug':
        pkg.dependencies['pug'] = '~1.11.0';
        break;
      case 'ejs':
        pkg.dependencies['ejs'] = '~2.3.3';
        break;
      default:
    }

    // CSS Engine support
    switch (program.css) {
      case 'less':
        pkg.dependencies['less-middleware'] = '1.0.x';
        break;
      case 'compass':
        pkg.dependencies['node-compass'] = '0.2.3';
        break;
      case 'stylus':
        pkg.dependencies['stylus'] = '0.42.3';
        break;
      case 'sass':
        pkg.dependencies['node-sass-middleware'] = '0.8.0';
        break;
      default:
    }

    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    write(path + '/server.js', server);
    mkdir(path + '/config', function(){
      write(path + '/config/routes.js', routes);

      mkdir(path + '/config/environments', function() {
        write(path + '/config/environments/all.js', envs);
        write(path + '/config/environments/development.js', envs);
        write(path + '/config/environments/production.js', envs);

        mkdir(path + '/config/initializers', function() {
          write(path + '/config/initializers/00_generic.js', initGeneric);
          write(path + '/config/initializers/01_mime.js', initMime);
          write(path + '/config/initializers/02_views.js', initViews);
          write(path + '/config/initializers/30_middleware.js', initMiddleware);

          complete();
        });
      });
    });

    if (program.git) {
      write(path + '/.gitignore', fs.readFileSync(__dirname + '/../templates/js/gitignore', 'utf-8'));
    }

    complete();
  });
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32'
    && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  // Path
  var destinationPath = program.args.shift() || '.';

  // App name
  var appName = path.basename(path.resolve(destinationPath));

  // Template engine
  program.template = 'jade';
  if (program.ejs) program.template = 'ejs';
  if (program.pug) program.template = 'pug';

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}
